<head><script type="text/javascript">
	// TOUCH-EVENTS SINGLE-FINGER SWIPE-SENSING JAVASCRIPT
	// Courtesy of PADILICIOUS.COM and MACOSXAUTOMATION.COM
	
	// this script can be used with one or more page elements to perform actions based on them being swiped with a single finger

	var triggerElementID = null; // this variable is used to identity the triggering element
	var fingerCount = 0;
	var startX = 0;
	var startY = 0;
	var curX = 0;
	var curY = 0;
	var deltaX = 0;
	var deltaY = 0;
	var horzDiff = 0;
	var vertDiff = 0;
	var minLength = 72; // the shortest distance the user may swipe
	var swipeLength = 0;
	var swipeAngle = null;
	var swipeDirection = null;
	
	// The 4 Touch Event Handlers
	
	// NOTE: the touchStart handler should also receive the ID of the triggering element
	// make sure its ID is passed in the event call placed in the element declaration, like:
	// <div id="picture-frame" ontouchstart="touchStart(event,'picture-frame');"  ontouchend="touchEnd(event);" ontouchmove="touchMove(event);" ontouchcancel="touchCancel(event);">

	function touchStart(event,passedName) {
		// disable the standard ability to select the touched object
		event.preventDefault();
		// get the total number of fingers touching the screen
		fingerCount = event.touches.length;
		// since we're looking for a swipe (single finger) and not a gesture (multiple fingers),
		// check that only one finger was used
		if ( fingerCount == 1 ) {
			// get the coordinates of the touch
			startX = event.touches[0].pageX;
			startY = event.touches[0].pageY;
			// store the triggering element ID
			triggerElementID = passedName;
		} else {
			// more than one finger touched so cancel
			touchCancel(event);
		}
	}

	function touchMove(event) {
		event.preventDefault();
		if ( event.touches.length == 1 ) {
			curX = event.touches[0].pageX;
			curY = event.touches[0].pageY;
		} else {
			touchCancel(event);
		}
	}
	
	function touchEnd(event) {
		event.preventDefault();
		// check to see if more than one finger was used and that there is an ending coordinate
		if ( fingerCount == 1 && curX != 0 ) {
			// use the Distance Formula to determine the length of the swipe
			swipeLength = Math.round(Math.sqrt(Math.pow(curX - startX,2) + Math.pow(curY - startY,2)));
			// if the user swiped more than the minimum length, perform the appropriate action
			if ( swipeLength >= minLength ) {
				caluculateAngle();
				determineSwipeDirection();
				processingRoutine();
				touchCancel(event); // reset the variables
			} else {
				touchCancel(event);
			}	
		} else {
			touchCancel(event);
		}
	}

	function touchCancel(event) {
		// reset the variables back to default values
		fingerCount = 0;
		startX = 0;
		startY = 0;
		curX = 0;
		curY = 0;
		deltaX = 0;
		deltaY = 0;
		horzDiff = 0;
		vertDiff = 0;
		swipeLength = 0;
		swipeAngle = null;
		swipeDirection = null;
		triggerElementID = null;
	}
	
	function caluculateAngle() {
		var X = startX-curX;
		var Y = curY-startY;
		var Z = Math.round(Math.sqrt(Math.pow(X,2)+Math.pow(Y,2))); //the distance - rounded - in pixels
		var r = Math.atan2(Y,X); //angle in radians (Cartesian system)
		swipeAngle = Math.round(r*180/Math.PI); //angle in degrees
		if ( swipeAngle < 0 ) { swipeAngle =  360 - Math.abs(swipeAngle); }
	}
	
	function determineSwipeDirection() {
		if ( (swipeAngle <= 45) && (swipeAngle >= 0) ) {
			swipeDirection = 'left';
		} else if ( (swipeAngle <= 360) && (swipeAngle >= 315) ) {
			swipeDirection = 'left';
		} else if ( (swipeAngle >= 135) && (swipeAngle <= 225) ) {
			swipeDirection = 'right';
		} else if ( (swipeAngle > 45) && (swipeAngle < 135) ) {
			swipeDirection = 'down';
		} else {
			swipeDirection = 'up';
		}
	}
    function keyEv(event) {
        var x = event.which || event.keyCode;
        console.log(x);
    }	
	function processingRoutine() {
		var swipedElement = document.getElementById(triggerElementID);
		if ( swipeDirection == 'left' ) {
                 var url =document.getElementById("no").outerHTML.split("\"")[3].replaceAll("amp;","");
                document.getElementById('imag').classList.add("rotate2");
                // do something with the url client side variable, for example redirect
                  window.location.href = url;           
			// REPLACE WITH YOUR ROUTINES
		} else if ( swipeDirection == 'right' ) {
            //right = good 
                document.getElementById('imag').classList.add("rotate");
                var url =document.getElementById("yes").outerHTML.split("\"")[3].replaceAll("amp;","");
                window.location.href = url;
		} 
	}
document.onkeydown = function() {
    switch (window.event.keyCode) {
        case 37:
            var url =document.getElementById("no").outerHTML.split("\"")[3].replaceAll("amp;","");
            document.getElementById('imag').classList.add("rotate2");
            window.location.href = url;  
        console.log("left");
         break;
        case 39:
        @* console.log("right"); *@
             document.getElementById('imag').classList.add("rotate");
             var url =document.getElementById("yes").outerHTML.split("\"")[3].replaceAll("amp;","");
                window.location.href = url;
         break;
    }
};

</script>
<style>
        .rotate {
        animation: rotation 2s infinite linear;
        }

        @@keyframes rotation {
            from {
                transform: rotate(0deg);
            }
            to {
                @* transform: rotate(359deg);*@
                @* transform: translate(50vw, -10vh); *@
                @* transform-origin: right; *@
                transform:matrix(0.81,0.59,-0.59,0.81,200,-200);
                @* transform:matrix(0.34,-0.22,0.22,0.34,-200,-200); *@

            }
        }
        .rotate2 {
        animation: rotation2 2s infinite linear;
        }

        @@keyframes rotation2 {
            from {
                transform: rotate(0deg);
            }
            to {
                @* transform: rotate(359deg);*@
                @* transform: translate(50vw, -10vh); *@
                @* transform-origin: right; *@
                @* transform:matrix(0.81,0.59,-0.59,0.81,20,-100); *@
                transform:matrix(0.34,-0.22,0.22,0.34,-200,-200);

            }
        }

    #yes{
        visibility: hidden;
    }
    #no{
        visibility: hidden;
    }
    img{
        display: block;
        margin-left: auto;
        margin-right: auto;
        max-width: 100%;
        height: auto;
      }
      
</style>
<script>
function access() {
	console.log("helo");
   var iframe = document.getElementById("nice");
   var innerDoc = iframe.contentWindow.document.getElementsByTagName("H1")[0];
   console.log(innerDoc);
}
</script>
</head>
@model CreateQuery

    

<body onload="access()">
<div id=my_msg>

    <div id="swipeBox" onkeydown="swipeBox" ontouchstart="touchStart(event,'swipeBox');" ontouchend="touchEnd(event);" ontouchmove="touchMove(event);" ontouchcancel="touchCancel(event);" style="position:relative;width:100%;height:100%;">
    <div onload="init()">
    <h1 data-role="page" id="pageone">@ViewBag.Title</h1>
    <h2>@ViewBag.Message</h2>

    <img src= @ViewBag.ImageUrl alt="Italian Trulli" id = imag >
	<p>@ViewBag.Description</p>
	<p>@ViewBag.Menu</p>
	<iframe id = "nice" class="embed-responsive-item"  src=@ViewBag.Menu width="400" height="400"></iframe>
	<iframe class="embed-responsive-item"  src=@ViewBag.menuPhoto width="400" height="400"></iframe>

   <div id = "yes"> @Html.ActionLink("yes!!", "CreateMatches", new { sessionId = ViewBag.sessionId, index = ViewBag.index, name = ViewBag.name,score = 1, enough = ViewBag.Enough }) </div>
   <div id = "no"> @Html.ActionLink("No Thanks", "CreateMatches", new { sessionId = ViewBag.sessionId, index = ViewBag.index, name = ViewBag.name,score = 0, enough = ViewBag.Enough})</div>
    </div>
    </div>
</div>
</body>